<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gaming</title>
    <style>
        html,
        body,
        canvas {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
    </style>
</head>
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();

    let users = [];
    let user = {
        name: '<%= user %>',
        userId: socket.id,
    };
    var availableCorners = [
        'bottom-left',
        'bottom-right',
        'top-left',
        'top-right',
    ];

    socket.on('corners', (data) => {
        availableCorners = data.corners;
    });
    socket.emit('new-user', user);
    socket.on('user-connected', data => {
        console.log(data.user.name + ' connected');
    });
    socket.on('user-disconnected', data => {
        console.log(data.user.name + ' disconnected');
    });
    socket.on('update', (data) => {
        // Update the local player list
        users = data.users;
    });

</script>

<body>
    <canvas id="canvas" height="100%" width="100%"></canvas>

</body>
<script>

    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    window.onresize = function () {
        socket.emit('resize', {
            canvasWidth: canvas.width,
            canvasHeight: canvas.height,
            WIDTH: Math.floor(window.innerWidth / 3),
            HEIGHT: Math.floor(window.innerHeight / 3),
            HALF_WIDTH: Math.floor(window.innerWidth / 3) / 2,
            HALF_HEIGHT: Math.floor(window.innerHeight / 3) / 2,
        });
    }

    function onLoad() {
        socket.emit('resize', {
            canvasWidth: canvas.width,
            canvasHeight: canvas.height,
            WIDTH: Math.floor(window.innerWidth / 3),
            HEIGHT: Math.floor(window.innerHeight / 3),
            HALF_WIDTH: Math.floor(window.innerWidth / 3) / 2,
            HALF_HEIGHT: Math.floor(window.innerHeight / 3) / 2,
        });
    }

    //Raycasting Stuff  

    // 88888888ba                                                                        88                                ad88888ba                          ad88     ad88  
    // 88      "8b                                                                ,d     ""                               d8"     "8b  ,d                    d8"      d8"    
    // 88      ,8P                                                                88                                      Y8,          88                    88       88     
    // 88aaaaaa8P'  ,adPPYYba,  8b       d8   ,adPPYba,  ,adPPYYba,  ,adPPYba,  MM88MMM  88  8b,dPPYba,    ,adPPYb,d8     `Y8aaaaa,  MM88MMM  88       88  MM88MMM  MM88MMM  
    // 88""""88'    ""     `Y8  `8b     d8'  a8"     ""  ""     `Y8  I8[    ""    88     88  88P'   `"8a  a8"    `Y88       `"""""8b,  88     88       88    88       88     
    // 88    `8b    ,adPPPPP88   `8b   d8'   8b          ,adPPPPP88   `"Y8ba,     88     88  88       88  8b       88             `8b  88     88       88    88       88     
    // 88     `8b   88,    ,88    `8b,d8'    "8a,   ,aa  88,    ,88  aa    ]8I    88,    88  88       88  "8a,   ,d88     Y8a     a8P  88,    "8a,   ,a88    88       88     
    // 88      `8b  `"8bbdP"Y8      Y88'      `"Ybbd8"'  `"8bbdP"Y8  `"YbbdP"'    "Y888  88  88       88   `"YbbdP"Y8      "Y88888P"   "Y888   `"YbbdP'Y8    88       88     
    //                              d8'                                                                    aa,    ,88                                                        
    //                             d8'                                                                      "Y8bbdP"                                                         

    // FPS
    const FPS = 60;
    const cycleDelay = Math.floor(1000 / FPS);
    var oldCycleTime = 0;
    var cycleCount = 0;
    var fps_rate = '...';

    // map
    const MAP_SIZE = 32;
    const MAP_SCALE = 128;
    const MAP_RANGE = MAP_SCALE * MAP_SIZE;
    const MAP_SPEED = (MAP_SCALE / 2) / 10;
    var map = [
        1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    ];
    var showMap = false;

    // handle key down events
    document.addEventListener('keydown', function (event) {
        var key = event.keyCode;
        socket.emit('keydown', key);
    });
    document.addEventListener('keyup', function (event) {
        var key = event.keyCode;
        socket.emit('keyup', key);
        switch (key) {
            case 77: showMap = !showMap; break;
        }
    });

    // screen
    const WIDTH = Math.floor(window.innerWidth / 4), HALF_WIDTH = WIDTH / 2;
    const HEIGHT = Math.floor(window.innerHeight / 4), HALF_HEIGHT = HEIGHT / 2;

    let mainCornerX = 0;
    let mainCornerY = 0;

    // camera
    const DOUBLE_PI = Math.PI * 2;
    const FOV = Math.PI / 3;
    const HALF_FOV = FOV / 2;
    const STEP_ANGLE = FOV / WIDTH;

    // graphics
    const WALLS = [];

    // load wall textures
    for (var filename = 0; filename < 3; filename++) {
        var img = new Image();
        img.src = "walls/" + filename + ".png";
        WALLS.push(img);
    }

    const EMPQ = [];

    // load empty question mark
    for (var filename = 0; filename < 4; filename++) {
        var img = new Image();
        img.src = "empQs/" + filename + ".png";
        EMPQ.push(img);
    }



    // Game Loop
    function gameLoop() {
        // Update FPS
        cycleCount++;
        if (cycleCount >= 60) cycleCount = 0;
        var startTime = Date.now();
        var cycleTime = startTime - oldCycleTime;
        oldCycleTime = startTime;
        if (cycleCount % 60 == 0) fps_rate = Math.floor(1000 / cycleTime);

        // Resize dynamically
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Draw Background
        ctx.drawImage(WALLS[0], 0, 0, canvas.width, canvas.height); // Full screen

        // Draw FPS
        ctx.fillStyle = 'black';
        ctx.font = '1vi Arial';
        ctx.fillText('FPS: ' + fps_rate, 5, 15);

        let mainUser = users.find(u => u.userId === socket.id);
        if (!mainUser) return;

        // Raycast users
        var userX = mainUser.playerX;
        var userY = mainUser.playerY;
        var userAngle = mainUser.playerAngle;

        // Raycasting
        var currentAngle = userAngle + HALF_FOV;
        var rayStartX = Math.floor(userX / MAP_SCALE) * MAP_SCALE;
        var rayStartY = Math.floor(userY / MAP_SCALE) * MAP_SCALE;

        // loop for casted rays
        for (var ray = 0; ray < canvas.width; ray++) {
            // get current angle sin & cos
            var currentSin = Math.sin(currentAngle); currentSin = currentSin ? currentSin : .000001;
            var currentCos = Math.cos(currentAngle); currentCos = currentCos ? currentCos : .000001;

            // vertical line intersection
            var rayEndX, rayEndY, rayDirectionX, verticalDepth, textureEndY, textureY;
            if (currentSin > 0) { rayEndX = rayStartX + MAP_SCALE; rayDirectionX = 1 }
            else { rayEndX = rayStartX; rayDirectionX = -1 }
            for (var offset = 0; offset < MAP_RANGE; offset += MAP_SCALE) {
                verticalDepth = (rayEndX - userX) / currentSin;
                rayEndY = userY + verticalDepth * currentCos;
                var mapTargetX = Math.floor(rayEndX / MAP_SCALE);
                var mapTargetY = Math.floor(rayEndY / MAP_SCALE);
                if (currentSin <= 0) mapTargetX += rayDirectionX;
                var targetSquare = mapTargetY * MAP_SIZE + mapTargetX;
                if (targetSquare < 0 || targetSquare >= map.length - 1) break;
                if (map[targetSquare] != 0) { textureY = map[targetSquare]; break; };
                rayEndX += rayDirectionX * MAP_SCALE;
            }
            textureEndY = rayEndY;

            // horizontal line intersection
            var rayEndY, rayEndX, rayDirectionY, horizontalDepth, textureEndX, textureX;
            if (currentCos > 0) { rayEndY = rayStartY + MAP_SCALE; rayDirectionY = 1 }
            else { rayEndY = rayStartY; rayDirectionY = -1 }
            for (var offset = 0; offset < MAP_RANGE; offset += MAP_SCALE) {
                horizontalDepth = (rayEndY - userY) / currentCos;
                rayEndX = userX + horizontalDepth * currentSin;
                var mapTargetX = Math.floor(rayEndX / MAP_SCALE);
                var mapTargetY = Math.floor(rayEndY / MAP_SCALE);
                if (currentCos <= 0) mapTargetY += rayDirectionY;
                var targetSquare = mapTargetY * MAP_SIZE + mapTargetX;
                if (targetSquare < 0 || targetSquare >= map.length - 1) break;
                if (map[targetSquare] != 0) { textureX = map[targetSquare]; break; };
                rayEndY += rayDirectionY * MAP_SCALE;
            }
            textureEndX = rayEndX;

            // render 3D projection
            var depth = verticalDepth < horizontalDepth ? verticalDepth : horizontalDepth;
            var textureImage = verticalDepth < horizontalDepth ? textureY : textureX;
            var textureOffset = verticalDepth < horizontalDepth ? textureEndY : textureEndX;
            textureOffset = textureOffset - Math.floor(textureOffset / MAP_SCALE) * MAP_SCALE;
            depth *= Math.cos(userAngle - currentAngle);
            var wallHeight = Math.min(Math.floor(MAP_SCALE * 300 / (depth + 0.0001)), 50000);

            ctx.drawImage(
                WALLS[textureImage],
                textureOffset,  // Source img x offset
                0,  // Source img y offset
                1, // Source img width
                128, // Source img height
                ray, // Target image x offset
                (canvas.height / 2 - Math.floor(wallHeight / 2)), // Target image y offset
                1, // Target image width
                wallHeight, // Target image height
            );

            var currentAngle = userAngle + HALF_FOV - ray * STEP_ANGLE;
            var raySin = Math.sin(currentAngle);
            var rayCos = Math.cos(currentAngle);

            for (var depth = 0; depth < MAP_RANGE; depth += 5) {
                var targetX = userX + depth * raySin;
                var targetY = userY + depth * rayCos;

                for (let targetUser of Object.values(users)) {
                    if (targetUser.userId !== mainUser.userId) {
                        let distance = Math.sqrt(Math.pow(targetUser.playerX - targetX, 2) + Math.pow(targetUser.playerY - targetY, 2));
                        if (distance < 5) {
                            var userDepth = depth * Math.cos(userAngle - currentAngle);
                            var userHeight = Math.min(Math.floor(MAP_SCALE * 300 / (userDepth + 0.0001)), 50000);
                            ctx.fillStyle = 'yellow';
                            ctx.fillRect(
                                ray, 
                                (canvas.height / 2 - Math.floor(userHeight / 2)), 
                                1, 
                                userHeight
                            );
                            break;
                        }
                    }
                }
            }

            currentAngle -= STEP_ANGLE;
        }

        if (showMap) {
            // Draw 2d map
            for (var row = 0; row < MAP_SIZE; row++) {
                for (var col = 0; col < MAP_SIZE; col++) {
                    var square = row * MAP_SIZE + col;
                    if (map[square] != 0) {
                        ctx.fillStyle = 'green';
                        ctx.fillRect(col * 5, row * 5, 5, 5);
                    } else {
                        ctx.fillStyle = '#aaa';
                        ctx.fillRect(col * 5, row * 5, 5, 5);
                    }
                }

                for (i in users) {
                    let itUser = users[i];
                    let color = itUser.userId != socket.id ? 'blue' : 'red';
                    ctx.fillStyle = color;
                    ctx.beginPath();
                    ctx.arc(itUser.playerX / MAP_SCALE * 5, itUser.playerY / MAP_SCALE * 5, 3, 0, DOUBLE_PI, true);
                    ctx.fill();
                    ctx.strokeStyle = color;
                    ctx.lineWidth = 1;
                    ctx.beginPath();
                    ctx.moveTo(itUser.playerX / MAP_SCALE * 5, itUser.playerY / MAP_SCALE * 5);
                    ctx.lineTo(itUser.playerX / MAP_SCALE * 5 + Math.sin(itUser.playerAngle) * 5, itUser.playerY / MAP_SCALE * 5 + Math.cos(itUser.playerAngle) * 5);
                    ctx.stroke();
                }
            }
        }

        // Draw empty question marks
        for (availableCorner in availableCorners) {
            switch (availableCorners[availableCorner]) {
                case "top-left":
                    ctx.drawImage(EMPQ[0], 0, 0, canvas.width / 2, canvas.height / 2);
                    break;
                case "top-right":
                    ctx.drawImage(EMPQ[1], canvas.width / 2, 0, canvas.width / 2, canvas.height / 2);
                    break;
                case "bottom-left":
                    ctx.drawImage(EMPQ[2], 0, canvas.height / 2, canvas.width / 2, canvas.height / 2);
                    break;
                case "bottom-right":
                    ctx.drawImage(EMPQ[3], canvas.width / 2, canvas.height / 2, canvas.width / 2, canvas.height / 2);
                    break;
            }
        }

        // Border
        ctx.strokeStyle = 'red';
        ctx.lineWidth = 2;
        ctx.strokeRect(0, 0, canvas.width, canvas.height)

        //inf loop
        setTimeout(gameLoop, cycleDelay);

    } window.onload = function () { gameLoop(); onLoad(); };
</script>

</html>






























const express = require('express');
const { createServer } = require('node:http');
const { join } = require('node:http');

const app = express();
const server = createServer(app);

const port = 3000;

app.set('view engine', 'ejs');
app.use(express.static('public'));
app.use(express.urlencoded({ extended: true }));

const { Server } = require('socket.io');
const io = new Server(server);

function loggedIn(req, res, next) {
    let user = req.query.user;
    if (user) {
        next();
    } else {
        res.redirect('/login');
    }
}

// Define a route
app.get('/', (req, res) => {
    res.render('index', { title: 'Welcome to Express with EJS' });
});

app.get('/game', loggedIn, (req, res) => {
    let user = req.query.user;
    res.render('game', { title: 'Welcome to Express with EJS', user });
});

var availableCorners = [
    'bottom-left',
    'bottom-right',
    'top-left',
    'top-right',
];

let users = {};

// map
const MAP_SIZE = 32;
const MAP_SCALE = 128;
const MAP_SPEED = (MAP_SCALE / 2) / 10;

// initialization
io.on('connection', (socket) => {
    // max users
    if (users.length > 4) {
        socket.emit('full');
        socket.disconnect();
        return;
    }

    // template values stuff
    users[socket.id] = {
        name: 'unknown',
        userId: socket.id,
        playerSocket: socket,
        //player
        playerX: MAP_SCALE + 20,
        playerY: MAP_SCALE + 20,
        playerAngle: Math.PI / 3,
        playerMoveX: 0,
        playerMoveY: 0,
        playerMoveAngle: 0,
        corner: 'undecided',
    }

    let user = users[socket.id];

    socket.on('new-user', (data) => {
        console.log('New name connected: ' + data.name);
        users[socket.id].name = data.name;
    });

    socket.on('disconnect', () => {
        console.log('A user disconnected');
        delete users[socket.id];
        console.log('')
        if (user.corner != 'undecided') {
            availableCorners.push(user.corner);
        }
        io.emit('corners', { corners: availableCorners });
   });

    socket.on('resize', (data) => {
        users[socket.id].canvasWidth = data.canvasWidth;
        users[socket.id].canvasHeight = data.canvasHeight;
        users[socket.id].WIDTH = data.WIDTH;
        users[socket.id].HEIGHT = data.HEIGHT;
        users[socket.id].HALF_WIDTH = data.HALF_WIDTH;
        users[socket.id].HALF_HEIGHT = data.HALF_HEIGHT;
    });

    user.corner = availableCorners[0];
    availableCorners.shift();
    for (var i in users) {
        let user = users[i];
        console.log('user.corner: ' + user.corner);
    }

    io.emit('corners', { corners: availableCorners });
});

// key inputs
io.on('connection', (socket) => {
    socket.on('keydown', (key) => {
        switch (key) {
            case 83: users[socket.id].playerMoveX = -1; users[socket.id].playerMoveY = -1; break; // s
            case 87: users[socket.id].playerMoveX = 1; users[socket.id].playerMoveY = 1; break; // w
            case 65: users[socket.id].playerMoveAngle = 1; break; // a
            case 68: users[socket.id].playerMoveAngle = -1; break; // d
        }
    });

    socket.on('keyup', (key) => {
        switch (key) {
            case 83: users[socket.id].playerMoveX = 0; users[socket.id].playerMoveY = 0; break; // s
            case 87: users[socket.id].playerMoveX = 0; users[socket.id].playerMoveY = 0; break; // w
            case 65: users[socket.id].playerMoveAngle = 0; break; // a
            case 68: users[socket.id].playerMoveAngle = 0; break; // d
        }
    });
});

var map = [
    1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
];

setInterval(() => { step(); }, 1000 / 1000);

function step() {
    let tempUserList = {};

    for (var i in users) {
        let user = users[i];

        // player
        var playerX = user.playerX;
        var playerY = user.playerY;
        var playerAngle = user.playerAngle;
        var playerMoveX = user.playerMoveX;
        var playerMoveY = user.playerMoveY;
        var playerMoveAngle = user.playerMoveAngle;

        // update player position
        var playerOffsetX = Math.sin(playerAngle) * MAP_SPEED;
        var playerOffsetY = Math.cos(playerAngle) * MAP_SPEED;
        var mapTargetX = Math.floor(playerY / MAP_SCALE) * MAP_SIZE + Math.floor((playerX + playerOffsetX * playerMoveX * 5) / MAP_SCALE);
        var mapTargetY = Math.floor((playerY + playerOffsetY * playerMoveY * 5) / MAP_SCALE) * MAP_SIZE + Math.floor(playerX / MAP_SCALE);

        if (playerMoveX && map[mapTargetX] == 0) playerX += playerOffsetX * playerMoveX;
        if (playerMoveY && map[mapTargetY] == 0) playerY += playerOffsetY * playerMoveY;
        if (playerMoveAngle) playerAngle += 0.06 * playerMoveAngle;

        // Update user object with new position
        user.playerX = playerX;
        user.playerY = playerY;
        user.playerAngle = playerAngle;

        // console.log(
        //     'canvasWidth: ' + user.canvasWidth,
        //     'playerX: ' + playerX,
        //     'playerY: ' + playerY,
        //     'playerAngle: ' + playerAngle,
        //     'mapTargetX: ' + mapTargetX,
        //     'mapTargetY: ' + mapTargetY,
        //     'mapOffsetX: ' + mapOffsetX,
        //     'mapOffsetY: ' + mapOffsetY,
        //     'playerMapX: ' + playerMapX,
        //     'playerMapY: ' + playerMapY,
        // );

        // add the player to the temp player list
        tempUserList[user.userId] = {
            name: user.name,
            userId: user.userId,
            // Raycast stuff
            mapTargetX: mapTargetX,
            mapTargetY: mapTargetY,
            playerX: playerX,
            playerY: playerY,
            playerAngle: playerAngle,
            corner: user.corner,
        };
    }

    // for every player in the player list
    for (var i in users) {
        let user = users[i];
        // send the player's position to the client
        user.playerSocket.emit('update', { users: tempUserList });
    }
}





server.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});